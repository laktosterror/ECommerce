@page "/MyAccount"
@using ECommerce.Client.Services
@using ECommerce.Contracts.Requests
@using ECommerce.Contracts.Responses
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IAuthService AuthService
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IMyAccountService MyAccountService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@code {
    
    bool isAuthenticated = false;
    MudDataGrid<OrderResponse> dataGrid;
    string _updatedPassword = string.Empty;
    
    CustomerResponse _customerResponse = new()
    {
        Id = Guid.Empty,
        Email = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        PhoneNumber = string.Empty,
        Address = string.Empty
    };
    
    private SignInRequest _signInRequest = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };
    private CreateUserRequest _createUserRequest = new()
    {
        Email = string.Empty,
        Password = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        PhoneNumber = string.Empty,
        Address = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        var availableJwt = await ProtectedSessionStorage.GetAsync<string>("jwt");
        // var authState = await AuthService.IsSignedIn();
        // TODO: implement verify token
        if (availableJwt.Success)
        {
            isAuthenticated = true;
        }
    }

    public async Task SignIn()
    {
        var signIn = await AuthService.SignInAsync(_signInRequest);
        if (signIn != null)
        {
            await ProtectedSessionStorage.SetAsync("jwt", signIn.Token);
            isAuthenticated = true;
            Snackbar.Add("Logged in!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Wrong email or password!", Severity.Error);
        }
    }

    public async Task SignUp()
    {
        var signedUp = await AuthService.SignUpAsync(_createUserRequest);
        if (signedUp)
        {
            Snackbar.Add("Signed up! Proceed to login", Severity.Success);
        }
    }

    public async Task UpdateMyInfo()
    {
        var jwt = await ProtectedSessionStorage.GetAsync<string>("jwt");
        if (jwt.Success)
        {
            UpdateUserRequest updateUserRequest = new()
            {
                Email = _customerResponse.Email,
                FirstName = _customerResponse.FirstName,
                LastName = _customerResponse.LastName,
                Address = _customerResponse.Address,
                PhoneNumber = _customerResponse.PhoneNumber,
                Password = _updatedPassword
            };

            var response = await MyAccountService.UpdateMyUser(jwt.Value, updateUserRequest);
            if (response != null)
            {
                Snackbar.Add("Updated user info!");
            }
            else
            {
                Snackbar.Add("Failed to update user!");
            }
        }
        else
        {
            Snackbar.Add("You are not authenticated!");
        }
    }
    
     private async Task<GridData<OrderResponse>> ServerReload(GridState<OrderResponse> state)
     { 
         var jwt = await ProtectedSessionStorage.GetAsync<string>("jwt"); 
         var data = (await MyAccountService.GetMyOrdersAsync(jwt.Value)).Items;
         _customerResponse = await MyAccountService.GetMyInfo(jwt.Value);
         StateHasChanged();
         
         var totalItems = data.Count();
         
         var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
         return new GridData<OrderResponse>
         {
             TotalItems = totalItems,
             Items = pagedData
         };
    }
}

@if (isAuthenticated)
{
<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Welcome @_customerResponse.FirstName!</MudText>
    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="_customerResponse">
            <DataAnnotationsValidator/>
            <MudTextField @bind-Value="_customerResponse.FirstName" Label="First Name" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="_customerResponse.LastName" Label="Last Name" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="_customerResponse.Email" Label="Email" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="_customerResponse.PhoneNumber" Label="Phone Number" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="_customerResponse.Address" Label="Address" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="_updatedPassword" Label="New Password" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password"/>

            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="UpdateMyInfo">Save</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>
<MudCard>
    <MudCardHeader>
       <MudText Typo="Typo.h6">My Orders</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid
            Striped="true"
            @ref="dataGrid"
            T="OrderResponse"
            ServerData="ServerReload"
            Filterable="false"
            ReadOnly="true">
            
            <Columns>
                <HierarchyColumn/>
                <PropertyColumn Property="x => x.Id" Title="Order Id"/>
                <PropertyColumn Property="x => x.OrderDate" Title="Order Date"/>
                <PropertyColumn Property="x => x.Status" Title="Status"/>
            </Columns>

            <ChildRowContent>
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Products In Order:</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Outlined="true" Items="@context.Item.Products" Hover="true" Breakpoint="Breakpoint.Sm"
                                  LoadingProgressColor="Color.Info">
                            <HeaderContent>
                                <MudTh>Id</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh>Description</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Price</MudTh>
                                <MudTh>Status</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="SubContext">
                                <MudTd DataLabel="Id">@SubContext.Id</MudTd>
                                <MudTd DataLabel="Name">@SubContext.Name</MudTd>
                                <MudTd DataLabel="Description">@SubContext.Description</MudTd>
                                <MudTd DataLabel="Category">@SubContext.Category</MudTd>
                                <MudTd DataLabel="Price">@SubContext.Price</MudTd>
                                <MudTd DataLabel="Status">@SubContext.Status</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </ChildRowContent>

            <PagerContent>
                <MudDataGridPager T="OrderResponse"/>
            </PagerContent>
        </MudDataGrid>
    </MudCardContent>
</MudCard>
}
else
{ 
    <EditForm Model="_signInRequest" OnValidSubmit="SignIn">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h3">Sign in!</MudText>
            </MudCardHeader>
            <MudCardContent>
                <DataAnnotationsValidator/>
                <MudTextField @bind-Value="_signInRequest.Email" Label="Email" Required="true"/>
                <MudTextField @bind-Value="_signInRequest.Password" InputType="InputType.Password" Label="Password" Required="true"/>
            
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Sign In</MudButton>
            </MudCardContent>
        </MudCard>
    </EditForm>
    <EditForm Model="_createUserRequest" OnSubmit="SignUp">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h3">Or Register!</MudText>
            </MudCardHeader>
            <MudCardContent>
                <DataAnnotationsValidator/>
                <MudTextField @bind-Value="_createUserRequest.FirstName" Label="First Name" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTextField @bind-Value="_createUserRequest.LastName" Label="Last Name" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTextField @bind-Value="_createUserRequest.Email" Label="Email" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTextField @bind-Value="_createUserRequest.PhoneNumber" Label="Phone Number" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTextField @bind-Value="_createUserRequest.Address" Label="Address" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTextField @bind-Value="_createUserRequest.Password" Label="New Password" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password"/>

                <MudButton ButtonType="ButtonType.Submit" Color="Color.Secondary">Register</MudButton>
            </MudCardContent>
        </MudCard>
    </EditForm>
}
