@using ECommerce.Api.Mapping
@using ECommerce.Client.Services
@using ECommerce.Contracts.Responses
@inject ICustomerService CustomerService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDataGrid
    @ref="dataGrid"
    T="CustomerResponse"
    ServerData="ServerReload"
    Filterable="false"
    ReadOnly="true">

    <ToolBarContent>
        <MudText Typo="Typo.h5">Customers</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-1"></MudTextField>
        <MudSpacer/>
        <MudButton OnClick="OpenCreateCustomerModal" Color="Color.Primary" Variant="Variant.Filled" class="mx-3">Create
            Customer
        </MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Customer Id"/>
        <PropertyColumn Property="x => x.FirstName" Title="First Name"/>
        <PropertyColumn Property="x => x.LastName" Title="Last Name"/>
        <PropertyColumn Property="x => x.Email"/>
        <PropertyColumn Property="x => x.PhoneNumber"/>
        <PropertyColumn Property="x => x.Address"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="@Size.Small" Variant="@Variant.Filled"
                                   Color="@Color.Secondary" OnClick="@(() => OpenDeleteCustomerDialog(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CustomerResponse"/>
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<CustomerResponse> dataGrid;
    string searchString;

    private async Task<GridData<CustomerResponse>> ServerReload(GridState<CustomerResponse> state)
    {
        var data = (await CustomerService.GetCustomersAsync()).Items;
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id} {element.PhoneNumber}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(CustomerResponse.Id):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Id
                    );
                    break;
                case nameof(CustomerResponse.FirstName):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.FirstName
                    );
                    break;
                case nameof(CustomerResponse.Email):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Email
                    );
                    break;
                case nameof(CustomerResponse.PhoneNumber):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.PhoneNumber
                    );
                    break;
                case nameof(CustomerResponse.Address):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Address
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<CustomerResponse>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task OpenDeleteCustomerDialog(CustomerResponse customer)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<DeleteCustomerDialog> { ["Customer"] = customer };

        var dialog = await DialogService.ShowAsync<DeleteCustomerDialog>("Delete Customer", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var customerToDelete = result.Data as CustomerResponse;
            await CustomerService.DeleteCustomerAsync(customerToDelete.Id);
            await dataGrid.ReloadServerData();
        }
    }

    private async Task OpenCreateCustomerModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<CreateCustomerDialog>("Create Customer", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newCustomer = result.Data as CreateCustomerRequest;
            await CustomerService.CreateCustomerAsync(newCustomer);
            await dataGrid.ReloadServerData();
        }
    }
}